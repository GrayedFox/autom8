// For more comprehensive examples of custom commands please read more here:
// https://on.cypress.io/custom-commands

// Authenticate directly using a JSON POST request
Cypress.Commands.add('loginByJSON', (uri, username, password) => {
  cy.fixture('data.json').then((authData) => {
    // here we are short circuiting the uri paramater to equal the environment properties set in
    // cypress.env.json
    uri = uri || `${Cypress.env('apiUrl')}${Cypress.env('login')}`

    // here we are short circuiting the username and password params to equal those generated by
    // the cypress generateFixtures() task. This is a bit of a code smell since it relies on a
    // specific underlying JSON structure, nevertheless it demonstrates how to extract data from a
    // database and then use it inside a test run. This makes your custom commands depndent on
    // actual data inside the test database and removes flake (auth details shouldn't be static or
    // done by hand unless absolutely necessary or specific to a individual spec/regression)
    username = username || authData[0].username
    password = password || authData[0].password

    Cypress.log({
      name: 'Login by JSON: ',
      message: `${uri} | ${username} | ${password}`,
    })

    // this command should theoretically work against any API that minimally requires a JSON body
    // with only a valid username and password in order to authenticate
    return cy.request('POST', uri, {
      username,
      password
    })
  })
})

// Upload an image file to the specified form (assumes form upload type is file)
Cypress.Commands.add('uploadImage', (imageName, selector, imageType = 'png') => {
  // image should live inside fixtures/images/ folder
  const imagePath = `images/${imageName}`

  // load the image as a fixture
  cy.fixture(imagePath).as('ourImage')

  // better to use a normal function here since we need the calling function's scope
  // in order to reference 'this.ourImage'
  cy.get(selector).then(function callback(el) {
    // convert the image base64 string to a blob
    const blob = Cypress.Blob.base64StringToBlob(this.ourImage, `image/${imageType}`)
    // create a new image file instance from the blob and file path (defaults to png image)
    const file = new File([blob], imagePath, { type: `image/${imageType}` })
    // A DataTransfer is used to hold information during a drag and drop operation
    const list = new DataTransfer()
    // add our file to the data transfer items array
    list.items.add(file)
    // replace element's (presumaby empty) files property with our image
    el[0].files = list.files
    // fire the change event on the fileUpload element and ensure it bubbles up the DOM
    el[0].dispatchEvent(new Event('change', { bubbles: true }))
  })
})
